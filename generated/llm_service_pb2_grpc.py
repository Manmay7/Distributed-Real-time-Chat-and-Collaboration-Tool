# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from generated import llm_service_pb2 as llm__service__pb2


class LLMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLLMAnswer = channel.unary_unary(
                '/llm.LLMService/GetLLMAnswer',
                request_serializer=llm__service__pb2.LLMRequest.SerializeToString,
                response_deserializer=llm__service__pb2.LLMResponse.FromString,
                )
        self.GetSmartReply = channel.unary_unary(
                '/llm.LLMService/GetSmartReply',
                request_serializer=llm__service__pb2.SmartReplyRequest.SerializeToString,
                response_deserializer=llm__service__pb2.SmartReplyResponse.FromString,
                )
        self.SummarizeConversation = channel.unary_unary(
                '/llm.LLMService/SummarizeConversation',
                request_serializer=llm__service__pb2.SummarizeRequest.SerializeToString,
                response_deserializer=llm__service__pb2.SummarizeResponse.FromString,
                )
        self.GetContextSuggestions = channel.unary_unary(
                '/llm.LLMService/GetContextSuggestions',
                request_serializer=llm__service__pb2.ContextRequest.SerializeToString,
                response_deserializer=llm__service__pb2.SuggestionsResponse.FromString,
                )


class LLMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLLMAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSmartReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SummarizeConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContextSuggestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswer,
                    request_deserializer=llm__service__pb2.LLMRequest.FromString,
                    response_serializer=llm__service__pb2.LLMResponse.SerializeToString,
            ),
            'GetSmartReply': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSmartReply,
                    request_deserializer=llm__service__pb2.SmartReplyRequest.FromString,
                    response_serializer=llm__service__pb2.SmartReplyResponse.SerializeToString,
            ),
            'SummarizeConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.SummarizeConversation,
                    request_deserializer=llm__service__pb2.SummarizeRequest.FromString,
                    response_serializer=llm__service__pb2.SummarizeResponse.SerializeToString,
            ),
            'GetContextSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContextSuggestions,
                    request_deserializer=llm__service__pb2.ContextRequest.FromString,
                    response_serializer=llm__service__pb2.SuggestionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/llm.LLMService/GetLLMAnswer',
            llm__service__pb2.LLMRequest.SerializeToString,
            llm__service__pb2.LLMResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSmartReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/llm.LLMService/GetSmartReply',
            llm__service__pb2.SmartReplyRequest.SerializeToString,
            llm__service__pb2.SmartReplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SummarizeConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/llm.LLMService/SummarizeConversation',
            llm__service__pb2.SummarizeRequest.SerializeToString,
            llm__service__pb2.SummarizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContextSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/llm.LLMService/GetContextSuggestions',
            llm__service__pb2.ContextRequest.SerializeToString,
            llm__service__pb2.SuggestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
